{"version":3,"sources":["atoms.ts","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","INIT_DATA","JSON","parse","window","localStorage","getItem","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","useForm","register","handleSubmit","setValue","setToDos","useSetRecoilState","useRecoilValue","onSubmit","oldToDos","toDoList","id","Date","now","text","setItem","stringify","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","currentToDos","ToDoList","useRecoilState","setCategory","value","onInput","map","GlobalStyle","createGlobalStyle","reset","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","document","getElementById"],"mappings":"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","file":"static/js/main.2658f26f.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\n\nenum Categories {\n  'TO_DO' = 'TO_DO',\n  'DOING' = 'DOING',\n  'DONE' = 'DONE',\n}\n\ntype ToDoType = {\n  id: number;\n  text: string;\n  category: Categories;\n};\n\nconst categoryState = atom<Categories>({\n  key: 'category',\n  default: Categories.TO_DO,\n});\n\nconst INIT_DATA = JSON.parse(window.localStorage.getItem('toDoList') || '[]');\nconst toDoState = atom<ToDoType[]>({\n  key: 'toDo',\n  default: INIT_DATA,\n});\n\nconst toDoSelector = selector({\n  key: 'toDoSelector',\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n\n    return toDos.filter(toDo => toDo.category === category);\n  },\n});\n\nexport type { ToDoType };\nexport { toDoState, categoryState, toDoSelector, Categories };\n","import { useForm } from 'react-hook-form';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { categoryState, toDoState } from 'atoms';\n\nimport type { FC } from 'react';\n\ntype FormType = {\n  toDo: string;\n};\n\nconst CreateToDo: FC = () => {\n  const { register, handleSubmit, setValue } = useForm<FormType>();\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n\n  const onSubmit = ({ toDo }: FormType) => {\n    setToDos(oldToDos => {\n      const toDoList = [...oldToDos, { id: Date.now(), text: toDo, category }];\n      window.localStorage.setItem('toDoList', JSON.stringify(toDoList));\n      return toDoList;\n    });\n    setValue('toDo', '');\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        {...register('toDo', { required: 'Please Write a To Do' })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n};\n\nexport default CreateToDo;\n","import { useSetRecoilState } from 'recoil';\nimport { Categories, toDoState } from 'atoms';\n\nimport type { FC, MouseEvent } from 'react';\nimport type { ToDoType } from 'atoms';\n\nconst ToDo: FC<ToDoType> = ({ text, category, id }) => {\n  const setToDos = useSetRecoilState(toDoState);\n\n  const onClick = (event: MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n\n    setToDos(oldToDos => {\n      const targetIndex = oldToDos.findIndex(toDo => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      const toDoList = [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n\n      window.localStorage.setItem('toDoList', JSON.stringify(toDoList));\n\n      return toDoList;\n    });\n  };\n\n  const handleToDoDelete = () => {\n    setToDos(currentToDos => {\n      const toDoList = currentToDos.filter(toDo => toDo.id !== id);\n      window.localStorage.setItem('toDoList', JSON.stringify(toDoList));\n      return toDoList;\n    });\n  };\n\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          To DO\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          Done\n        </button>\n      )}\n      <button onClick={handleToDoDelete}>Delete</button>\n    </li>\n  );\n};\n\nexport default ToDo;\n","import { useRecoilState, useRecoilValue } from 'recoil';\nimport { categoryState, toDoSelector, Categories } from 'atoms';\nimport CreateToDo from './CreateToDo';\nimport ToDo from './ToDo';\n\nimport type { FC, FormEvent } from 'react';\n\nconst ToDoList: FC = () => {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n\n  const onInput = (event: FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n      </select>\n      <CreateToDo />\n      {toDos.map(toDo => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n};\n\nexport default ToDoList;\n","import { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset';\nimport ToDoList from 'components/ToDoList';\n\nimport type { FC } from 'react';\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: 'Source Sans Pro', sans-serif;\n    background-color: ${props => props.theme.bgColor};\n    color: ${props => props.theme.textColor};\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nconst App: FC = () => {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { ThemeProvider } from 'styled-components';\nimport { darkTheme } from 'theme';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { DefaultTheme } from 'styled-components';\n\nconst lightTheme: DefaultTheme = {\n  bgColor: 'whitesmoke',\n  textColor: 'black',\n  accentColor: '#9c88ff',\n};\n\nconst darkTheme: DefaultTheme = {\n  bgColor: '#2f3640',\n  textColor: '#f5f6fa',\n  accentColor: '#9c88ff',\n};\n\nexport { lightTheme, darkTheme };\n"],"sourceRoot":""}